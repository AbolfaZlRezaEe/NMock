plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    compileSdk 31
    compileSdkVersion 31
    defaultConfig {
        applicationId "me.abolfazl.nmock"
        minSdk 21
        targetSdk 31
        versionCode 9
        versionName "2.0.1"
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def keyProperties = validateReleaseKey(
                    'key.properties',
                    'KEY_FILE_PATH',
                    'KEY_FILE_ALIAS',
                    'KEY_FILE_PASSWORD',
                    'KEY_STORE_PASSWORD'
            )
            storeFile file(keyProperties.getProperty('KEY_FILE_PATH'))
            keyAlias keyProperties.getProperty('KEY_FILE_ALIAS')
            keyPassword keyProperties.getProperty('KEY_FILE_PASSWORD')
            storePassword keyProperties.getProperty('KEY_STORE_PASSWORD')
        }
    }

    checkMAP_API_KEYIsAvailable()

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Google Map SDK
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.maps.android:android-maps-utils:2.4.0'

    // Play Services (Don't change these versions, i will check this later...)
    implementation 'com.google.android.gms:play-services-gcm:16.1.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'

    // Sentry
    implementation 'io.sentry:sentry-android:5.7.4'

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    // Dagger-Hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-compiler:2.40.5"

    // Room Wrapper
    implementation "androidx.room:room-runtime:2.4.3"
    implementation "androidx.room:room-ktx:2.4.3"
    kapt "androidx.room:room-compiler:2.4.3"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Moshi
    implementation "com.squareup.moshi:moshi:1.13.0"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.13.0"

    // HttpLoggingInterceptor
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.2"

    // Timber
    implementation "com.jakewharton.timber:timber:5.0.1"

    // Lifecycle libraries
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.0-rc01"

    // Nice Seekbar
    implementation 'com.github.Chrisvin:RubberPicker:v1.5'

    // JTS
    implementation 'com.vividsolutions:jts:1.13'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:21.1.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging'

    // Pusher
    implementation 'com.pusher:push-notifications-android:1.9.0'

    // Lottie
    implementation "com.airbnb.android:lottie:3.6.1"
}

sentry {
    autoUpload = true
    includeProguardMapping = true
    autoUploadProguardMapping = true
    uploadNativeSymbols = true
    includeNativeSources = true
}

Properties validateReleaseKey(String fileName,
                              String filePathKeyName,
                              String fileAliasKeyName,
                              String filePasswordKeyName,
                              String fileStorePasswordKeyName) {
    File keyFile = new File(fileName)
    if (keyFile.exists()) {
        Properties keyProperties = new Properties()
        keyProperties.load(project.rootProject.file(fileName).newDataInputStream())
        def keyFilePath = keyProperties.getProperty(filePathKeyName)
        def keyAlias = keyProperties.getProperty(fileAliasKeyName)
        def keyPassword = keyProperties.getProperty(filePasswordKeyName)
        def keyStorePassword = keyProperties.getProperty(fileStorePasswordKeyName)
        if (keyFilePath && keyAlias && keyPassword && keyStorePassword) {
            return keyProperties
        } else {
            throw new IllegalAccessException("One of the key information is not entered" +
                    " or not valid! Please check key information in " + fileName + " again!")
        }
    } else {
        throw new IllegalAccessException(fileName + " doesn't exist! Please make sure" +
                " that you have this file for containing Release key information!")
    }
}

def checkMAP_API_KEYIsAvailable() {
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (!localProperties.getProperty('MAPS_API_KEY')) {
        throw new IllegalArgumentException("For using application, You should specify " +
                "(MAPS_API_KEY) for the project. for creating it, you can check " +
                "https://developers.google.com/maps/documentation/places/android-sdk/cloud-setup")
    }
}
