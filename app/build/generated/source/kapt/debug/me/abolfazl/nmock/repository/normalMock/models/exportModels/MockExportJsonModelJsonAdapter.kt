// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package me.abolfazl.nmock.repository.normalMock.models.exportModels

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MockExportJsonModelJsonAdapter(
  moshi: Moshi
) : JsonAdapter<MockExportJsonModel>() {
  private val options: JsonReader.Options = JsonReader.Options.of("file_created_at", "file_owner",
      "version_code", "mock_information", "route_information")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "fileCreatedAt")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "versionCode")

  private val mockInformationExportJsonModelAdapter: JsonAdapter<MockInformationExportJsonModel> =
      moshi.adapter(MockInformationExportJsonModel::class.java, emptySet(), "mockInformation")

  private val routeInformationExportJsonModelAdapter: JsonAdapter<RouteInformationExportJsonModel> =
      moshi.adapter(RouteInformationExportJsonModel::class.java, emptySet(), "routeInformation")

  public override fun toString(): String = buildString(41) {
      append("GeneratedJsonAdapter(").append("MockExportJsonModel").append(')') }

  public override fun fromJson(reader: JsonReader): MockExportJsonModel {
    var fileCreatedAt: String? = null
    var fileOwner: String? = null
    var versionCode: Int? = null
    var mockInformation: MockInformationExportJsonModel? = null
    var routeInformation: RouteInformationExportJsonModel? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> fileCreatedAt = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("fileCreatedAt", "file_created_at", reader)
        1 -> fileOwner = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fileOwner",
            "file_owner", reader)
        2 -> versionCode = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("versionCode",
            "version_code", reader)
        3 -> mockInformation = mockInformationExportJsonModelAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("mockInformation", "mock_information", reader)
        4 -> routeInformation = routeInformationExportJsonModelAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("routeInformation", "route_information", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return MockExportJsonModel(
        fileCreatedAt = fileCreatedAt ?: throw Util.missingProperty("fileCreatedAt",
            "file_created_at", reader),
        fileOwner = fileOwner ?: throw Util.missingProperty("fileOwner", "file_owner", reader),
        versionCode = versionCode ?: throw Util.missingProperty("versionCode", "version_code",
            reader),
        mockInformation = mockInformation ?: throw Util.missingProperty("mockInformation",
            "mock_information", reader),
        routeInformation = routeInformation ?: throw Util.missingProperty("routeInformation",
            "route_information", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: MockExportJsonModel?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("file_created_at")
    stringAdapter.toJson(writer, value_.fileCreatedAt)
    writer.name("file_owner")
    stringAdapter.toJson(writer, value_.fileOwner)
    writer.name("version_code")
    intAdapter.toJson(writer, value_.versionCode)
    writer.name("mock_information")
    mockInformationExportJsonModelAdapter.toJson(writer, value_.mockInformation)
    writer.name("route_information")
    routeInformationExportJsonModelAdapter.toJson(writer, value_.routeInformation)
    writer.endObject()
  }
}
