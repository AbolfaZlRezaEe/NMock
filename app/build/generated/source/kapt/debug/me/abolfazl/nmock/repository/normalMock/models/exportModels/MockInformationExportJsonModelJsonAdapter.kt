// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package me.abolfazl.nmock.repository.normalMock.models.exportModels

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MockInformationExportJsonModelJsonAdapter(
  moshi: Moshi
) : JsonAdapter<MockInformationExportJsonModel>() {
  private val options: JsonReader.Options = JsonReader.Options.of("type", "name", "description",
      "origin_address", "destination_address", "speed", "bearing", "accuracy", "provider",
      "created_at", "updated_at")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "type")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "originAddress")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "speed")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(),
      "bearing")

  public override fun toString(): String = buildString(52) {
      append("GeneratedJsonAdapter(").append("MockInformationExportJsonModel").append(')') }

  public override fun fromJson(reader: JsonReader): MockInformationExportJsonModel {
    var type: String? = null
    var name: String? = null
    var description: String? = null
    var originAddress: String? = null
    var destinationAddress: String? = null
    var speed: Int? = null
    var bearing: Float? = null
    var accuracy: Float? = null
    var provider: String? = null
    var createdAt: String? = null
    var updatedAt: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        3 -> originAddress = nullableStringAdapter.fromJson(reader)
        4 -> destinationAddress = nullableStringAdapter.fromJson(reader)
        5 -> speed = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("speed", "speed",
            reader)
        6 -> bearing = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("bearing",
            "bearing", reader)
        7 -> accuracy = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("accuracy",
            "accuracy", reader)
        8 -> provider = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("provider",
            "provider", reader)
        9 -> createdAt = nullableStringAdapter.fromJson(reader)
        10 -> updatedAt = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return MockInformationExportJsonModel(
        type = type ?: throw Util.missingProperty("type", "type", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        description = description ?: throw Util.missingProperty("description", "description",
            reader),
        originAddress = originAddress,
        destinationAddress = destinationAddress,
        speed = speed ?: throw Util.missingProperty("speed", "speed", reader),
        bearing = bearing ?: throw Util.missingProperty("bearing", "bearing", reader),
        accuracy = accuracy ?: throw Util.missingProperty("accuracy", "accuracy", reader),
        provider = provider ?: throw Util.missingProperty("provider", "provider", reader),
        createdAt = createdAt,
        updatedAt = updatedAt
    )
  }

  public override fun toJson(writer: JsonWriter, value_: MockInformationExportJsonModel?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("type")
    stringAdapter.toJson(writer, value_.type)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("origin_address")
    nullableStringAdapter.toJson(writer, value_.originAddress)
    writer.name("destination_address")
    nullableStringAdapter.toJson(writer, value_.destinationAddress)
    writer.name("speed")
    intAdapter.toJson(writer, value_.speed)
    writer.name("bearing")
    floatAdapter.toJson(writer, value_.bearing)
    writer.name("accuracy")
    floatAdapter.toJson(writer, value_.accuracy)
    writer.name("provider")
    stringAdapter.toJson(writer, value_.provider)
    writer.name("created_at")
    nullableStringAdapter.toJson(writer, value_.createdAt)
    writer.name("updated_at")
    nullableStringAdapter.toJson(writer, value_.updatedAt)
    writer.endObject()
  }
}
