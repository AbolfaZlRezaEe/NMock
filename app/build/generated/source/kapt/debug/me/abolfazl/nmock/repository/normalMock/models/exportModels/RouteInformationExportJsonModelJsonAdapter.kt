// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package me.abolfazl.nmock.repository.normalMock.models.exportModels

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RouteInformationExportJsonModelJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RouteInformationExportJsonModel>() {
  private val options: JsonReader.Options = JsonReader.Options.of("origin_location",
      "destination_location", "route_lines")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "originLocation")

  private val listOfLineExportJsonModelAdapter: JsonAdapter<List<LineExportJsonModel>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, LineExportJsonModel::class.java),
      emptySet(), "routeLines")

  public override fun toString(): String = buildString(53) {
      append("GeneratedJsonAdapter(").append("RouteInformationExportJsonModel").append(')') }

  public override fun fromJson(reader: JsonReader): RouteInformationExportJsonModel {
    var originLocation: String? = null
    var destinationLocation: String? = null
    var routeLines: List<LineExportJsonModel>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> originLocation = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("originLocation", "origin_location", reader)
        1 -> destinationLocation = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("destinationLocation", "destination_location", reader)
        2 -> routeLines = listOfLineExportJsonModelAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("routeLines", "route_lines", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RouteInformationExportJsonModel(
        originLocation = originLocation ?: throw Util.missingProperty("originLocation",
            "origin_location", reader),
        destinationLocation = destinationLocation ?:
            throw Util.missingProperty("destinationLocation", "destination_location", reader),
        routeLines = routeLines ?: throw Util.missingProperty("routeLines", "route_lines", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RouteInformationExportJsonModel?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("origin_location")
    stringAdapter.toJson(writer, value_.originLocation)
    writer.name("destination_location")
    stringAdapter.toJson(writer, value_.destinationLocation)
    writer.name("route_lines")
    listOfLineExportJsonModelAdapter.toJson(writer, value_.routeLines)
    writer.endObject()
  }
}
